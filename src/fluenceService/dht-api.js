"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-226
 *
 */
var fluence_1 = require("@fluencelabs/fluence");
var v1_1 = require("@fluencelabs/fluence/dist/internal/compilerSupport/v1");
function registerGeesomeCrypto() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var serviceId;
    var service;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
    }
    if (typeof args[0] === 'string') {
        serviceId = args[0];
    }
    else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }
    else {
        serviceId = "GeesomeCrypto";
    }
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(fluence_1.FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    }
    else if (typeof args[1] === 'object') {
        service = args[1];
    }
    else {
        service = args[2];
    }
    peer.internals.callServiceHandler.use(function (req, resp, next) {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }
        if (req.fnName === 'checkSignature') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    from: req.tetraplets[0], data: req.tetraplets[1], seqno: req.tetraplets[2], signature: req.tetraplets[3]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.checkSignature(req.args[0], req.args[1], req.args[2], req.args[3], callParams);
        }
        next();
    });
}
exports.registerGeesomeCrypto = registerGeesomeCrypto;
function registerDHTOp() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var serviceId;
    var service;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
    }
    if (typeof args[0] === 'string') {
        serviceId = args[0];
    }
    else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }
    else {
        serviceId = "op";
    }
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(fluence_1.FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    }
    else if (typeof args[1] === 'object') {
        service = args[1];
    }
    else {
        service = args[2];
    }
    peer.internals.callServiceHandler.use(function (req, resp, next) {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }
        if (req.fnName === 'identity') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    result: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.identity(req.args[0], callParams);
        }
        next();
    });
}
exports.registerDHTOp = registerDHTOp;
function registerSubscriberService() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var serviceId;
    var service;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
    }
    if (typeof args[0] === 'string') {
        serviceId = args[0];
    }
    else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(fluence_1.FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    }
    else if (typeof args[1] === 'object') {
        service = args[1];
    }
    else {
        service = args[2];
    }
    peer.internals.callServiceHandler.use(function (req, resp, next) {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }
        if (req.fnName === 'send_event') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    e: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            service.send_event(req.args[0], callParams);
            resp.result = {};
        }
        next();
    });
}
exports.registerSubscriberService = registerSubscriberService;
function registerClientAPI() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var serviceId;
    var service;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
    }
    if (typeof args[0] === 'string') {
        serviceId = args[0];
    }
    else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }
    else {
        serviceId = "api";
    }
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(fluence_1.FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    }
    else if (typeof args[1] === 'object') {
        service = args[1];
    }
    else {
        service = args[2];
    }
    peer.internals.callServiceHandler.use(function (req, resp, next) {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }
        if (req.fnName === 'receive_event') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    topic: req.tetraplets[0], e: req.tetraplets[1]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            service.receive_event(req.args[0], req.args[1], callParams);
            resp.result = {};
        }
        next();
    });
}
exports.registerClientAPI = registerClientAPI;
function fanout_event() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var relay;
    var topic;
    var event;
    var call;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        relay = args[1];
        topic = args[2];
        event = args[3];
        call = args[4];
        config = args[5];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        relay = args[0];
        topic = args[1];
        event = args[2];
        call = args[3];
        config = args[4];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n      (call %init_peer_id% (\"getDataSrv\" \"relay\") [] relay)\n     )\n     (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n    )\n    (call %init_peer_id% (\"getDataSrv\" \"event\") [] event)\n   )\n   (call %init_peer_id% (\"GeesomeCrypto\" \"checkSignature\") [event.$.from! event.$.data! event.$.seqno! event.$.signature!] sigValid)\n  )\n  (xor\n   (match sigValid false\n    (xor\n     (xor\n      (call %init_peer_id% (\"callbackSrv\" \"call\") [\"signature_not_valid\"])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n     )\n     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n    )\n   )\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (seq\n         (seq\n          (seq\n           (call -relay- (\"op\" \"noop\") [])\n           (xor\n            (seq\n             (call relay (\"op\" \"string_to_b58\") [topic] k)\n             (call relay (\"kad\" \"neighborhood\") [k [] []] nodes)\n            )\n            (seq\n             (seq\n              (call -relay- (\"op\" \"noop\") [])\n              (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n             )\n             (call -relay- (\"op\" \"noop\") [])\n            )\n           )\n          )\n          (call -relay- (\"op\" \"noop\") [])\n         )\n         (fold nodes n\n          (par\n           (seq\n            (xor\n             (seq\n              (call n (\"peer\" \"timestamp_sec\") [] t)\n              (call n (\"aqua-dht\" \"get_values\") [topic t] $res)\n             )\n             (null)\n            )\n            (call relay (\"op\" \"noop\") [])\n           )\n           (seq\n            (call -relay- (\"op\" \"noop\") [])\n            (next n)\n           )\n          )\n         )\n        )\n        (xor\n         (call relay (\"aqua-dht\" \"merge_two\") [$res.$.[0].result! $res.$.[1].result!] v)\n         (seq\n          (call -relay- (\"op\" \"noop\") [])\n          (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\n         )\n        )\n       )\n       (call -relay- (\"op\" \"noop\") [])\n      )\n      (fold v.$.result! r\n       (par\n        (seq\n         (call r.$.relay_id.[0]! (\"op\" \"noop\") [])\n         (xor\n          (par\n           (seq\n            (call r.$.relay_id.[0]! (\"op\" \"noop\") [])\n            (call r.$.peer_id! (\"api\" \"receive_event\") [topic event])\n           )\n           (null)\n          )\n          (seq\n           (seq\n            (call r.$.relay_id.[0]! (\"op\" \"noop\") [])\n            (call -relay- (\"op\" \"noop\") [])\n           )\n           (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 5])\n          )\n         )\n        )\n        (seq\n         (call -relay- (\"op\" \"noop\") [])\n         (next r)\n        )\n       )\n      )\n     )\n     (call -relay- (\"op\" \"noop\") [])\n    )\n    (xor\n     (call %init_peer_id% (\"callbackSrv\" \"call\") [\"done\"])\n     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 6])\n    )\n   )\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 7])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'relay', function () { return relay; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.on('getDataSrv', 'event', function () { return event; });
            h.use(function (req, resp, next) {
                if (req.serviceId === 'callbackSrv' && req.fnName === 'call') {
                    var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                            arg0: req.tetraplets[0]
                        } });
                    resp.retCode = v1_1.ResultCodes.success;
                    call(req.args[0], callParams);
                    resp.result = {};
                }
                next();
            });
            h.onEvent('callbackSrv', 'response', function (args) {
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for fanout_event');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
exports.fanout_event = fanout_event;
function subscribeNode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var subscriber_node_id;
    var topic;
    var value;
    var service_id;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        subscriber_node_id = args[1];
        topic = args[2];
        value = args[3];
        service_id = args[4];
        config = args[5];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        subscriber_node_id = args[0];
        topic = args[1];
        value = args[2];
        service_id = args[3];
        config = args[4];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (seq\n         (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n         (call %init_peer_id% (\"getDataSrv\" \"subscriber_node_id\") [] subscriber_node_id)\n        )\n        (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n       )\n       (call %init_peer_id% (\"getDataSrv\" \"value\") [] value)\n      )\n      (call %init_peer_id% (\"getDataSrv\" \"service_id\") [] service_id)\n     )\n     (call -relay- (\"op\" \"noop\") [])\n    )\n    (xor\n     (seq\n      (seq\n       (call subscriber_node_id (\"peer\" \"timestamp_sec\") [] t)\n       (call subscriber_node_id (\"aqua-dht\" \"put_host_value\") [topic value t [] service_id 0] r)\n      )\n      (xor\n       (seq\n        (call subscriber_node_id (\"op\" \"string_to_b58\") [topic] k)\n        (call subscriber_node_id (\"kad\" \"neighborhood\") [k [] []] nodes)\n       )\n       (seq\n        (call -relay- (\"op\" \"noop\") [])\n        (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n       )\n      )\n     )\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n     )\n    )\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (fold nodes n\n   (par\n    (xor\n     (seq\n      (seq\n       (call n (\"peer\" \"timestamp_sec\") [] tt)\n       (call n (\"aqua-dht\" \"register_key\") [topic tt false 0])\n      )\n      (call n (\"aqua-dht\" \"propagate_host_value\") [r tt 0])\n     )\n     (null)\n    )\n    (seq\n     (call -relay- (\"op\" \"noop\") [])\n     (next n)\n    )\n   )\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'subscriber_node_id', function () { return subscriber_node_id; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.on('getDataSrv', 'value', function () { return value; });
            h.on('getDataSrv', 'service_id', function () { return service_id === null ? [] : [service_id]; });
            h.onEvent('callbackSrv', 'response', function (args) {
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for subscribeNode');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
exports.subscribeNode = subscribeNode;
function executeOnSubscribers() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var node_id;
    var topic;
    var call;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        node_id = args[1];
        topic = args[2];
        call = args[3];
        config = args[4];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        node_id = args[0];
        topic = args[1];
        call = args[2];
        config = args[3];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (seq\n         (seq\n          (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n          (call %init_peer_id% (\"getDataSrv\" \"node_id\") [] node_id)\n         )\n         (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n        )\n        (call -relay- (\"op\" \"noop\") [])\n       )\n       (xor\n        (seq\n         (call node_id (\"op\" \"string_to_b58\") [topic] k)\n         (call node_id (\"kad\" \"neighborhood\") [k [] []] nodes)\n        )\n        (seq\n         (seq\n          (call -relay- (\"op\" \"noop\") [])\n          (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n         )\n         (call -relay- (\"op\" \"noop\") [])\n        )\n       )\n      )\n      (call -relay- (\"op\" \"noop\") [])\n     )\n     (fold nodes n\n      (par\n       (seq\n        (xor\n         (seq\n          (call n (\"peer\" \"timestamp_sec\") [] t)\n          (call n (\"aqua-dht\" \"get_values\") [topic t] $res)\n         )\n         (null)\n        )\n        (call node_id (\"op\" \"noop\") [])\n       )\n       (seq\n        (call -relay- (\"op\" \"noop\") [])\n        (next n)\n       )\n      )\n     )\n    )\n    (xor\n     (call node_id (\"aqua-dht\" \"merge_two\") [$res.$.[0].result! $res.$.[1].result!] v)\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n     )\n    )\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (fold v.$.result! r\n   (par\n    (seq\n     (fold r.$.relay_id! -via-peer-\n      (seq\n       (call -via-peer- (\"op\" \"noop\") [])\n       (next -via-peer-)\n      )\n     )\n     (xor\n      (seq\n       (seq\n        (fold r.$.relay_id! -via-peer-\n         (seq\n          (call -via-peer- (\"op\" \"noop\") [])\n          (next -via-peer-)\n         )\n        )\n        (call -relay- (\"op\" \"noop\") [])\n       )\n       (xor\n        (call %init_peer_id% (\"callbackSrv\" \"call\") [r])\n        (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n       )\n      )\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\n     )\n    )\n    (seq\n     (call -relay- (\"op\" \"noop\") [])\n     (next r)\n    )\n   )\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 5])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'node_id', function () { return node_id; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.use(function (req, resp, next) {
                if (req.serviceId === 'callbackSrv' && req.fnName === 'call') {
                    var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                            arg0: req.tetraplets[0]
                        } });
                    resp.retCode = v1_1.ResultCodes.success;
                    call(req.args[0], callParams);
                    resp.result = {};
                }
                next();
            });
            h.onEvent('callbackSrv', 'response', function (args) {
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for executeOnSubscribers');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
exports.executeOnSubscribers = executeOnSubscribers;
function subscribe() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var node_id;
    var topic;
    var value;
    var relay_id;
    var service_id;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        node_id = args[1];
        topic = args[2];
        value = args[3];
        relay_id = args[4];
        service_id = args[5];
        config = args[6];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        node_id = args[0];
        topic = args[1];
        value = args[2];
        relay_id = args[3];
        service_id = args[4];
        config = args[5];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (seq\n         (seq\n          (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n          (call %init_peer_id% (\"getDataSrv\" \"node_id\") [] node_id)\n         )\n         (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n        )\n        (call %init_peer_id% (\"getDataSrv\" \"value\") [] value)\n       )\n       (call %init_peer_id% (\"getDataSrv\" \"relay_id\") [] relay_id)\n      )\n      (call %init_peer_id% (\"getDataSrv\" \"service_id\") [] service_id)\n     )\n     (call -relay- (\"op\" \"noop\") [])\n    )\n    (xor\n     (seq\n      (call node_id (\"op\" \"string_to_b58\") [topic] k)\n      (call node_id (\"kad\" \"neighborhood\") [k [] []] nodes)\n     )\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n     )\n    )\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (fold nodes n\n   (par\n    (xor\n     (seq\n      (call n (\"peer\" \"timestamp_sec\") [] t)\n      (call n (\"aqua-dht\" \"put_value\") [topic value t relay_id service_id 0])\n     )\n     (null)\n    )\n    (seq\n     (call -relay- (\"op\" \"noop\") [])\n     (next n)\n    )\n   )\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'node_id', function () { return node_id; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.on('getDataSrv', 'value', function () { return value; });
            h.on('getDataSrv', 'relay_id', function () { return relay_id === null ? [] : [relay_id]; });
            h.on('getDataSrv', 'service_id', function () { return service_id === null ? [] : [service_id]; });
            h.onEvent('callbackSrv', 'response', function (args) {
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for subscribe');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
exports.subscribe = subscribe;
function getNeighbours() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var node_id;
    var topic;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        node_id = args[1];
        topic = args[2];
        config = args[3];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        node_id = args[0];
        topic = args[1];
        config = args[2];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n       (call %init_peer_id% (\"getDataSrv\" \"node_id\") [] node_id)\n      )\n      (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n     )\n     (call -relay- (\"op\" \"noop\") [])\n    )\n    (xor\n     (seq\n      (call node_id (\"op\" \"string_to_b58\") [topic] k)\n      (call node_id (\"kad\" \"neighborhood\") [k [] []] nodes)\n     )\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n     )\n    )\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (xor\n   (call %init_peer_id% (\"callbackSrv\" \"response\") [nodes])\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'node_id', function () { return node_id; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.onEvent('callbackSrv', 'response', function (args) {
                var res = args[0];
                resolve(res);
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for getNeighbours');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
exports.getNeighbours = getNeighbours;
function initTopicAndSubscribeNode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var subscriber_node_id;
    var topic;
    var value;
    var service_id;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        subscriber_node_id = args[1];
        topic = args[2];
        value = args[3];
        service_id = args[4];
        config = args[5];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        subscriber_node_id = args[0];
        topic = args[1];
        value = args[2];
        service_id = args[3];
        config = args[4];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (seq\n         (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n         (call %init_peer_id% (\"getDataSrv\" \"subscriber_node_id\") [] subscriber_node_id)\n        )\n        (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n       )\n       (call %init_peer_id% (\"getDataSrv\" \"value\") [] value)\n      )\n      (call %init_peer_id% (\"getDataSrv\" \"service_id\") [] service_id)\n     )\n     (call -relay- (\"op\" \"noop\") [])\n    )\n    (xor\n     (seq\n      (seq\n       (seq\n        (call subscriber_node_id (\"peer\" \"timestamp_sec\") [] t)\n        (call subscriber_node_id (\"aqua-dht\" \"register_key\") [topic t false 0])\n       )\n       (call subscriber_node_id (\"aqua-dht\" \"put_host_value\") [topic value t [] service_id 0] r)\n      )\n      (xor\n       (seq\n        (call subscriber_node_id (\"op\" \"string_to_b58\") [topic] k)\n        (call subscriber_node_id (\"kad\" \"neighborhood\") [k [] []] nodes)\n       )\n       (seq\n        (call -relay- (\"op\" \"noop\") [])\n        (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n       )\n      )\n     )\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n     )\n    )\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (fold nodes n\n   (par\n    (xor\n     (seq\n      (seq\n       (call n (\"peer\" \"timestamp_sec\") [] tt)\n       (call n (\"aqua-dht\" \"register_key\") [topic tt false 0])\n      )\n      (call n (\"aqua-dht\" \"propagate_host_value\") [r tt 0])\n     )\n     (null)\n    )\n    (seq\n     (call -relay- (\"op\" \"noop\") [])\n     (next n)\n    )\n   )\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'subscriber_node_id', function () { return subscriber_node_id; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.on('getDataSrv', 'value', function () { return value; });
            h.on('getDataSrv', 'service_id', function () { return service_id === null ? [] : [service_id]; });
            h.onEvent('callbackSrv', 'response', function (args) {
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for initTopicAndSubscribeNode');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
exports.initTopicAndSubscribeNode = initTopicAndSubscribeNode;
function initTopic() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var node_id;
    var topic;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        node_id = args[1];
        topic = args[2];
        config = args[3];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        node_id = args[0];
        topic = args[1];
        config = args[2];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n       (call %init_peer_id% (\"getDataSrv\" \"node_id\") [] node_id)\n      )\n      (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n     )\n     (call -relay- (\"op\" \"noop\") [])\n    )\n    (xor\n     (seq\n      (call node_id (\"op\" \"string_to_b58\") [topic] k)\n      (call node_id (\"kad\" \"neighborhood\") [k [] []] nodes)\n     )\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n     )\n    )\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (fold nodes n\n   (par\n    (xor\n     (seq\n      (call n (\"peer\" \"timestamp_sec\") [] t)\n      (call n (\"aqua-dht\" \"register_key\") [topic t false 0])\n     )\n     (null)\n    )\n    (seq\n     (call -relay- (\"op\" \"noop\") [])\n     (next n)\n    )\n   )\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'node_id', function () { return node_id; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.onEvent('callbackSrv', 'response', function (args) {
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for initTopic');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
exports.initTopic = initTopic;
function findSubscribers() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var node_id;
    var topic;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        node_id = args[1];
        topic = args[2];
        config = args[3];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        node_id = args[0];
        topic = args[1];
        config = args[2];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (seq\n         (seq\n          (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n          (call %init_peer_id% (\"getDataSrv\" \"node_id\") [] node_id)\n         )\n         (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n        )\n        (call -relay- (\"op\" \"noop\") [])\n       )\n       (xor\n        (seq\n         (call node_id (\"op\" \"string_to_b58\") [topic] k)\n         (call node_id (\"kad\" \"neighborhood\") [k [] []] nodes)\n        )\n        (seq\n         (seq\n          (call -relay- (\"op\" \"noop\") [])\n          (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n         )\n         (call -relay- (\"op\" \"noop\") [])\n        )\n       )\n      )\n      (call -relay- (\"op\" \"noop\") [])\n     )\n     (fold nodes n\n      (par\n       (seq\n        (xor\n         (seq\n          (call n (\"peer\" \"timestamp_sec\") [] t)\n          (call n (\"aqua-dht\" \"get_values\") [topic t] $res)\n         )\n         (null)\n        )\n        (call node_id (\"op\" \"noop\") [])\n       )\n       (seq\n        (call -relay- (\"op\" \"noop\") [])\n        (next n)\n       )\n      )\n     )\n    )\n    (xor\n     (call node_id (\"aqua-dht\" \"merge_two\") [$res.$.[0].result! $res.$.[1].result!] v)\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n     )\n    )\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (xor\n   (call %init_peer_id% (\"callbackSrv\" \"response\") [v.$.result!])\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'node_id', function () { return node_id; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.onEvent('callbackSrv', 'response', function (args) {
                var res = args[0];
                resolve(res);
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for findSubscribers');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
exports.findSubscribers = findSubscribers;
function initTopicAndSubscribe() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var node_id;
    var topic;
    var value;
    var relay_id;
    var service_id;
    var notify;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        node_id = args[1];
        topic = args[2];
        value = args[3];
        relay_id = args[4];
        service_id = args[5];
        notify = args[6];
        config = args[7];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        node_id = args[0];
        topic = args[1];
        value = args[2];
        relay_id = args[3];
        service_id = args[4];
        notify = args[5];
        config = args[6];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (seq\n         (seq\n          (seq\n           (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n           (call %init_peer_id% (\"getDataSrv\" \"node_id\") [] node_id)\n          )\n          (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n         )\n         (call %init_peer_id% (\"getDataSrv\" \"value\") [] value)\n        )\n        (call %init_peer_id% (\"getDataSrv\" \"relay_id\") [] relay_id)\n       )\n       (call %init_peer_id% (\"getDataSrv\" \"service_id\") [] service_id)\n      )\n      (call -relay- (\"op\" \"noop\") [])\n     )\n     (xor\n      (seq\n       (call node_id (\"op\" \"string_to_b58\") [topic] k)\n       (call node_id (\"kad\" \"neighborhood\") [k [] []] nodes)\n      )\n      (seq\n       (call -relay- (\"op\" \"noop\") [])\n       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n      )\n     )\n    )\n    (call -relay- (\"op\" \"noop\") [])\n   )\n   (fold nodes n\n    (par\n     (seq\n      (xor\n       (seq\n        (seq\n         (seq\n          (call n (\"peer\" \"timestamp_sec\") [] t)\n          (call n (\"aqua-dht\" \"register_key\") [topic t false 0])\n         )\n         (call n (\"aqua-dht\" \"put_value\") [topic value t relay_id service_id 0] result)\n        )\n        (xor\n         (match result.$.success! true\n          (xor\n           (seq\n            (call n (\"op\" \"identity\") [result] $results)\n            (par\n             (seq\n              (call -relay- (\"op\" \"noop\") [])\n              (xor\n               (call %init_peer_id% (\"callbackSrv\" \"notify\") [])\n               (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n              )\n             )\n             (null)\n            )\n           )\n           (seq\n            (call -relay- (\"op\" \"noop\") [])\n            (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n           )\n          )\n         )\n         (null)\n        )\n       )\n       (null)\n      )\n      (call %init_peer_id% (\"op\" \"noop\") [])\n     )\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (next n)\n     )\n    )\n   )\n  )\n  (xor\n   (call %init_peer_id% (\"callbackSrv\" \"response\") [$results.$.[0]!])\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 5])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'node_id', function () { return node_id; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.on('getDataSrv', 'value', function () { return value; });
            h.on('getDataSrv', 'relay_id', function () { return relay_id === null ? [] : [relay_id]; });
            h.on('getDataSrv', 'service_id', function () { return service_id === null ? [] : [service_id]; });
            h.use(function (req, resp, next) {
                if (req.serviceId === 'callbackSrv' && req.fnName === 'notify') {
                    var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {} });
                    resp.retCode = v1_1.ResultCodes.success;
                    notify(callParams);
                    resp.result = {};
                }
                next();
            });
            h.onEvent('callbackSrv', 'response', function (args) {
                var res = args[0];
                resolve(res);
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for initTopicAndSubscribe');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
exports.initTopicAndSubscribe = initTopicAndSubscribe;
function sendToSubscribers() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var relay;
    var topic;
    var message;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        relay = args[1];
        topic = args[2];
        message = args[3];
        config = args[4];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        relay = args[0];
        topic = args[1];
        message = args[2];
        config = args[3];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (seq\n         (seq\n          (seq\n           (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n           (call %init_peer_id% (\"getDataSrv\" \"relay\") [] relay)\n          )\n          (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n         )\n         (call %init_peer_id% (\"getDataSrv\" \"message\") [] message)\n        )\n        (call -relay- (\"op\" \"noop\") [])\n       )\n       (xor\n        (seq\n         (call relay (\"op\" \"string_to_b58\") [topic] k)\n         (call relay (\"kad\" \"neighborhood\") [k [] []] nodes)\n        )\n        (seq\n         (seq\n          (call -relay- (\"op\" \"noop\") [])\n          (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n         )\n         (call -relay- (\"op\" \"noop\") [])\n        )\n       )\n      )\n      (call -relay- (\"op\" \"noop\") [])\n     )\n     (fold nodes n\n      (par\n       (seq\n        (xor\n         (seq\n          (call n (\"peer\" \"timestamp_sec\") [] t)\n          (call n (\"aqua-dht\" \"get_values\") [topic t] $res)\n         )\n         (null)\n        )\n        (call relay (\"op\" \"noop\") [])\n       )\n       (seq\n        (call -relay- (\"op\" \"noop\") [])\n        (next n)\n       )\n      )\n     )\n    )\n    (xor\n     (call relay (\"aqua-dht\" \"merge_two\") [$res.$.[0].result! $res.$.[1].result!] v)\n     (seq\n      (seq\n       (call -relay- (\"op\" \"noop\") [])\n       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n      )\n      (call -relay- (\"op\" \"noop\") [])\n     )\n    )\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (fold v.$.result! sub\n   (seq\n    (seq\n     (seq\n      (seq\n       (fold sub.$.relay_id! -via-peer-\n        (seq\n         (call -via-peer- (\"op\" \"noop\") [])\n         (next -via-peer-)\n        )\n       )\n       (xor\n        (seq\n         (fold sub.$.relay_id! -via-peer-\n          (seq\n           (call -via-peer- (\"op\" \"noop\") [])\n           (next -via-peer-)\n          )\n         )\n         (call sub.$.set_by! (sub.$.service_id.[0]! \"send_event\") [message])\n        )\n        (seq\n         (seq\n          (seq\n           (fold sub.$.relay_id! -via-peer-\n            (seq\n             (call -via-peer- (\"op\" \"noop\") [])\n             (next -via-peer-)\n            )\n           )\n           (call -relay- (\"op\" \"noop\") [])\n          )\n          (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n         )\n         (call -relay- (\"op\" \"noop\") [])\n        )\n       )\n      )\n      (fold sub.$.relay_id! -via-peer-\n       (seq\n        (call -via-peer- (\"op\" \"noop\") [])\n        (next -via-peer-)\n       )\n      )\n     )\n     (call -relay- (\"op\" \"noop\") [])\n    )\n    (next sub)\n   )\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'relay', function () { return relay; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.on('getDataSrv', 'message', function () { return message; });
            h.onEvent('callbackSrv', 'response', function (args) {
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for sendToSubscribers');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
exports.sendToSubscribers = sendToSubscribers;
function removeSubscriber() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var node_id;
    var topic;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        node_id = args[1];
        topic = args[2];
        config = args[3];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        node_id = args[0];
        topic = args[1];
        config = args[2];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n     (call %init_peer_id% (\"getDataSrv\" \"node_id\") [] node_id)\n    )\n    (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (xor\n   (seq\n    (call node_id (\"peer\" \"timestamp_sec\") [] t)\n    (call node_id (\"aqua-dht\" \"clear_host_value\") [topic t])\n   )\n   (seq\n    (call -relay- (\"op\" \"noop\") [])\n    (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n   )\n  )\n )\n (seq\n  (call -relay- (\"op\" \"noop\") [])\n  (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n )\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'node_id', function () { return node_id; });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.onEvent('callbackSrv', 'response', function (args) {
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for removeSubscriber');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
exports.removeSubscriber = removeSubscriber;
