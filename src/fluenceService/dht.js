"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-226
 *
 */
var fluence_1 = require("@fluencelabs/fluence");
var v1_1 = require("@fluencelabs/fluence/dist/internal/compilerSupport/v1");
function registerAquaDHT() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var serviceId;
    var service;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
    }
    if (typeof args[0] === 'string') {
        serviceId = args[0];
    }
    else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }
    else {
        serviceId = "aqua-dht";
    }
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(fluence_1.FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    }
    else if (typeof args[1] === 'object') {
        service = args[1];
    }
    else {
        service = args[2];
    }
    peer.internals.callServiceHandler.use(function (req, resp, next) {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }
        if (req.fnName === 'clear_expired') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    current_timestamp_sec: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.clear_expired(req.args[0], callParams);
        }
        if (req.fnName === 'clear_host_value') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    key: req.tetraplets[0], current_timestamp_sec: req.tetraplets[1]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.clear_host_value(req.args[0], req.args[1], callParams);
        }
        if (req.fnName === 'evict_stale') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    current_timestamp_sec: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.evict_stale(req.args[0], callParams);
        }
        if (req.fnName === 'get_key_metadata') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    key: req.tetraplets[0], current_timestamp_sec: req.tetraplets[1]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.get_key_metadata(req.args[0], req.args[1], callParams);
        }
        if (req.fnName === 'get_values') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    key: req.tetraplets[0], current_timestamp_sec: req.tetraplets[1]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.get_values(req.args[0], req.args[1], callParams);
        }
        if (req.fnName === 'merge') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    records: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.merge(req.args[0], callParams);
        }
        if (req.fnName === 'merge_hack_get_values') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    records: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.merge_hack_get_values(req.args[0], callParams);
        }
        if (req.fnName === 'merge_two') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    a: req.tetraplets[0], b: req.tetraplets[1]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.merge_two(req.args[0], req.args[1], callParams);
        }
        if (req.fnName === 'propagate_host_value') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    set_host_value: req.tetraplets[0], current_timestamp_sec: req.tetraplets[1], weight: req.tetraplets[2]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.propagate_host_value(req.args[0], req.args[1], req.args[2], callParams);
        }
        if (req.fnName === 'put_host_value') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    key: req.tetraplets[0], value: req.tetraplets[1], current_timestamp_sec: req.tetraplets[2], relay_id: req.tetraplets[3], service_id: req.tetraplets[4], weight: req.tetraplets[5]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.put_host_value(req.args[0], req.args[1], req.args[2], req.args[3], req.args[4], req.args[5], callParams);
        }
        if (req.fnName === 'put_value') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    key: req.tetraplets[0], value: req.tetraplets[1], current_timestamp_sec: req.tetraplets[2], relay_id: req.tetraplets[3], service_id: req.tetraplets[4], weight: req.tetraplets[5]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.put_value(req.args[0], req.args[1], req.args[2], req.args[3], req.args[4], req.args[5], callParams);
        }
        if (req.fnName === 'register_key') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    key: req.tetraplets[0], current_timestamp_sec: req.tetraplets[1], pin: req.tetraplets[2], weight: req.tetraplets[3]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.register_key(req.args[0], req.args[1], req.args[2], req.args[3], callParams);
        }
        if (req.fnName === 'renew_host_value') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    key: req.tetraplets[0], current_timestamp_sec: req.tetraplets[1]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.renew_host_value(req.args[0], req.args[1], callParams);
        }
        if (req.fnName === 'republish_key') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    key: req.tetraplets[0], current_timestamp_sec: req.tetraplets[1]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.republish_key(req.args[0], req.args[1], callParams);
        }
        if (req.fnName === 'republish_values') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    key: req.tetraplets[0], records: req.tetraplets[1], current_timestamp_sec: req.tetraplets[2]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.republish_values(req.args[0], req.args[1], req.args[2], callParams);
        }
        if (req.fnName === 'set_expired_timeout') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    timeout_sec: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            service.set_expired_timeout(req.args[0], callParams);
            resp.result = {};
        }
        if (req.fnName === 'set_host_expired_timeout') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    timeout_sec: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            service.set_host_expired_timeout(req.args[0], callParams);
            resp.result = {};
        }
        if (req.fnName === 'set_stale_timeout') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    timeout_sec: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            service.set_stale_timeout(req.args[0], callParams);
            resp.result = {};
        }
        next();
    });
}
exports.registerAquaDHT = registerAquaDHT;
// Functions
